// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nicotb_config.proto

#ifndef PROTOBUF_nicotb_5fconfig_2eproto__INCLUDED
#define PROTOBUF_nicotb_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NicotbConfig {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_nicotb_5fconfig_2eproto();
void protobuf_AssignDesc_nicotb_5fconfig_2eproto();
void protobuf_ShutdownFile_nicotb_5fconfig_2eproto();

class Signal;
class SignalGroupDefine;
class SignalGroup;
class Bus;
class Event;
class NicotbConfig;

enum Signal_NpType {
  Signal_NpType_U1 = 1,
  Signal_NpType_U8 = 2,
  Signal_NpType_U16 = 3,
  Signal_NpType_U32 = 4,
  Signal_NpType_I8 = 5,
  Signal_NpType_I16 = 6,
  Signal_NpType_I32 = 7
};
bool Signal_NpType_IsValid(int value);
const Signal_NpType Signal_NpType_NpType_MIN = Signal_NpType_U1;
const Signal_NpType Signal_NpType_NpType_MAX = Signal_NpType_I32;
const int Signal_NpType_NpType_ARRAYSIZE = Signal_NpType_NpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Signal_NpType_descriptor();
inline const ::std::string& Signal_NpType_Name(Signal_NpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Signal_NpType_descriptor(), value);
}
inline bool Signal_NpType_Parse(
    const ::std::string& name, Signal_NpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Signal_NpType>(
    Signal_NpType_descriptor(), name, value);
}
// ===================================================================

class Signal : public ::google::protobuf::Message {
 public:
  Signal();
  virtual ~Signal();

  Signal(const Signal& from);

  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Signal& default_instance();

  void Swap(Signal* other);

  // implements Message ----------------------------------------------

  Signal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Signal& from);
  void MergeFrom(const Signal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Signal_NpType NpType;
  static const NpType U1 = Signal_NpType_U1;
  static const NpType U8 = Signal_NpType_U8;
  static const NpType U16 = Signal_NpType_U16;
  static const NpType U32 = Signal_NpType_U32;
  static const NpType I8 = Signal_NpType_I8;
  static const NpType I16 = Signal_NpType_I16;
  static const NpType I32 = Signal_NpType_I32;
  static inline bool NpType_IsValid(int value) {
    return Signal_NpType_IsValid(value);
  }
  static const NpType NpType_MIN =
    Signal_NpType_NpType_MIN;
  static const NpType NpType_MAX =
    Signal_NpType_NpType_MAX;
  static const int NpType_ARRAYSIZE =
    Signal_NpType_NpType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  NpType_descriptor() {
    return Signal_NpType_descriptor();
  }
  static inline const ::std::string& NpType_Name(NpType value) {
    return Signal_NpType_Name(value);
  }
  static inline bool NpType_Parse(const ::std::string& name,
      NpType* value) {
    return Signal_NpType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated int32 shape = 2;
  inline int shape_size() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 2;
  inline ::google::protobuf::int32 shape(int index) const;
  inline void set_shape(int index, ::google::protobuf::int32 value);
  inline void add_shape(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // optional .NicotbConfig.Signal.NpType np_type = 3 [default = I32];
  inline bool has_np_type() const;
  inline void clear_np_type();
  static const int kNpTypeFieldNumber = 3;
  inline ::NicotbConfig::Signal_NpType np_type() const;
  inline void set_np_type(::NicotbConfig::Signal_NpType value);

  // @@protoc_insertion_point(class_scope:NicotbConfig.Signal)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_np_type();
  inline void clear_has_np_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  int np_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_AssignDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_nicotb_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Signal* default_instance_;
};
// -------------------------------------------------------------------

class SignalGroupDefine : public ::google::protobuf::Message {
 public:
  SignalGroupDefine();
  virtual ~SignalGroupDefine();

  SignalGroupDefine(const SignalGroupDefine& from);

  inline SignalGroupDefine& operator=(const SignalGroupDefine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalGroupDefine& default_instance();

  void Swap(SignalGroupDefine* other);

  // implements Message ----------------------------------------------

  SignalGroupDefine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalGroupDefine& from);
  void MergeFrom(const SignalGroupDefine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .NicotbConfig.Signal sigs = 2;
  inline int sigs_size() const;
  inline void clear_sigs();
  static const int kSigsFieldNumber = 2;
  inline const ::NicotbConfig::Signal& sigs(int index) const;
  inline ::NicotbConfig::Signal* mutable_sigs(int index);
  inline ::NicotbConfig::Signal* add_sigs();
  inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Signal >&
      sigs() const;
  inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Signal >*
      mutable_sigs();

  // @@protoc_insertion_point(class_scope:NicotbConfig.SignalGroupDefine)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Signal > sigs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_AssignDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_nicotb_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static SignalGroupDefine* default_instance_;
};
// -------------------------------------------------------------------

class SignalGroup : public ::google::protobuf::Message {
 public:
  SignalGroup();
  virtual ~SignalGroup();

  SignalGroup(const SignalGroup& from);

  inline SignalGroup& operator=(const SignalGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignalGroup& default_instance();

  void Swap(SignalGroup* other);

  // implements Message ----------------------------------------------

  SignalGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignalGroup& from);
  void MergeFrom(const SignalGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string prefix = 1;
  inline bool has_prefix() const;
  inline void clear_prefix();
  static const int kPrefixFieldNumber = 1;
  inline const ::std::string& prefix() const;
  inline void set_prefix(const ::std::string& value);
  inline void set_prefix(const char* value);
  inline void set_prefix(const char* value, size_t size);
  inline ::std::string* mutable_prefix();
  inline ::std::string* release_prefix();
  inline void set_allocated_prefix(::std::string* prefix);

  // required string grp_def_name = 2;
  inline bool has_grp_def_name() const;
  inline void clear_grp_def_name();
  static const int kGrpDefNameFieldNumber = 2;
  inline const ::std::string& grp_def_name() const;
  inline void set_grp_def_name(const ::std::string& value);
  inline void set_grp_def_name(const char* value);
  inline void set_grp_def_name(const char* value, size_t size);
  inline ::std::string* mutable_grp_def_name();
  inline ::std::string* release_grp_def_name();
  inline void set_allocated_grp_def_name(::std::string* grp_def_name);

  // @@protoc_insertion_point(class_scope:NicotbConfig.SignalGroup)
 private:
  inline void set_has_prefix();
  inline void clear_has_prefix();
  inline void set_has_grp_def_name();
  inline void clear_has_grp_def_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* prefix_;
  ::std::string* grp_def_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_AssignDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_nicotb_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static SignalGroup* default_instance_;
};
// -------------------------------------------------------------------

class Bus : public ::google::protobuf::Message {
 public:
  Bus();
  virtual ~Bus();

  Bus(const Bus& from);

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Bus& default_instance();

  void Swap(Bus* other);

  // implements Message ----------------------------------------------

  Bus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bus& from);
  void MergeFrom(const Bus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string hier = 2;
  inline bool has_hier() const;
  inline void clear_hier();
  static const int kHierFieldNumber = 2;
  inline const ::std::string& hier() const;
  inline void set_hier(const ::std::string& value);
  inline void set_hier(const char* value);
  inline void set_hier(const char* value, size_t size);
  inline ::std::string* mutable_hier();
  inline ::std::string* release_hier();
  inline void set_allocated_hier(::std::string* hier);

  // repeated .NicotbConfig.SignalGroup sig_grps = 3;
  inline int sig_grps_size() const;
  inline void clear_sig_grps();
  static const int kSigGrpsFieldNumber = 3;
  inline const ::NicotbConfig::SignalGroup& sig_grps(int index) const;
  inline ::NicotbConfig::SignalGroup* mutable_sig_grps(int index);
  inline ::NicotbConfig::SignalGroup* add_sig_grps();
  inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::SignalGroup >&
      sig_grps() const;
  inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::SignalGroup >*
      mutable_sig_grps();

  // repeated .NicotbConfig.Signal sigs = 4;
  inline int sigs_size() const;
  inline void clear_sigs();
  static const int kSigsFieldNumber = 4;
  inline const ::NicotbConfig::Signal& sigs(int index) const;
  inline ::NicotbConfig::Signal* mutable_sigs(int index);
  inline ::NicotbConfig::Signal* add_sigs();
  inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Signal >&
      sigs() const;
  inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Signal >*
      mutable_sigs();

  // @@protoc_insertion_point(class_scope:NicotbConfig.Bus)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_hier();
  inline void clear_has_hier();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* hier_;
  ::google::protobuf::RepeatedPtrField< ::NicotbConfig::SignalGroup > sig_grps_;
  ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Signal > sigs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_AssignDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_nicotb_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Bus* default_instance_;
};
// -------------------------------------------------------------------

class Event : public ::google::protobuf::Message {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  void Swap(Event* other);

  // implements Message ----------------------------------------------

  Event* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string ev_hier = 2;
  inline bool has_ev_hier() const;
  inline void clear_ev_hier();
  static const int kEvHierFieldNumber = 2;
  inline const ::std::string& ev_hier() const;
  inline void set_ev_hier(const ::std::string& value);
  inline void set_ev_hier(const char* value);
  inline void set_ev_hier(const char* value, size_t size);
  inline ::std::string* mutable_ev_hier();
  inline ::std::string* release_ev_hier();
  inline void set_allocated_ev_hier(::std::string* ev_hier);

  // required string ev_name = 3;
  inline bool has_ev_name() const;
  inline void clear_ev_name();
  static const int kEvNameFieldNumber = 3;
  inline const ::std::string& ev_name() const;
  inline void set_ev_name(const ::std::string& value);
  inline void set_ev_name(const char* value);
  inline void set_ev_name(const char* value, size_t size);
  inline ::std::string* mutable_ev_name();
  inline ::std::string* release_ev_name();
  inline void set_allocated_ev_name(::std::string* ev_name);

  // @@protoc_insertion_point(class_scope:NicotbConfig.Event)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_ev_hier();
  inline void clear_has_ev_hier();
  inline void set_has_ev_name();
  inline void clear_has_ev_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* ev_hier_;
  ::std::string* ev_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_AssignDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_nicotb_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static Event* default_instance_;
};
// -------------------------------------------------------------------

class NicotbConfig : public ::google::protobuf::Message {
 public:
  NicotbConfig();
  virtual ~NicotbConfig();

  NicotbConfig(const NicotbConfig& from);

  inline NicotbConfig& operator=(const NicotbConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NicotbConfig& default_instance();

  void Swap(NicotbConfig* other);

  // implements Message ----------------------------------------------

  NicotbConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NicotbConfig& from);
  void MergeFrom(const NicotbConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NicotbConfig.SignalGroupDefine siggrp_defs = 1;
  inline int siggrp_defs_size() const;
  inline void clear_siggrp_defs();
  static const int kSiggrpDefsFieldNumber = 1;
  inline const ::NicotbConfig::SignalGroupDefine& siggrp_defs(int index) const;
  inline ::NicotbConfig::SignalGroupDefine* mutable_siggrp_defs(int index);
  inline ::NicotbConfig::SignalGroupDefine* add_siggrp_defs();
  inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::SignalGroupDefine >&
      siggrp_defs() const;
  inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::SignalGroupDefine >*
      mutable_siggrp_defs();

  // repeated .NicotbConfig.Bus buses = 2;
  inline int buses_size() const;
  inline void clear_buses();
  static const int kBusesFieldNumber = 2;
  inline const ::NicotbConfig::Bus& buses(int index) const;
  inline ::NicotbConfig::Bus* mutable_buses(int index);
  inline ::NicotbConfig::Bus* add_buses();
  inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Bus >&
      buses() const;
  inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Bus >*
      mutable_buses();

  // repeated .NicotbConfig.Event events = 3;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 3;
  inline const ::NicotbConfig::Event& events(int index) const;
  inline ::NicotbConfig::Event* mutable_events(int index);
  inline ::NicotbConfig::Event* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Event >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Event >*
      mutable_events();

  // @@protoc_insertion_point(class_scope:NicotbConfig.NicotbConfig)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::NicotbConfig::SignalGroupDefine > siggrp_defs_;
  ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Bus > buses_;
  ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Event > events_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_AssignDesc_nicotb_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_nicotb_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static NicotbConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Signal

// required string name = 1;
inline bool Signal::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Signal::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Signal::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Signal::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Signal::name() const {
  return *name_;
}
inline void Signal::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Signal::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Signal::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Signal::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Signal::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Signal::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 shape = 2;
inline int Signal::shape_size() const {
  return shape_.size();
}
inline void Signal::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 Signal::shape(int index) const {
  return shape_.Get(index);
}
inline void Signal::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
}
inline void Signal::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Signal::shape() const {
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Signal::mutable_shape() {
  return &shape_;
}

// optional .NicotbConfig.Signal.NpType np_type = 3 [default = I32];
inline bool Signal::has_np_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Signal::set_has_np_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Signal::clear_has_np_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Signal::clear_np_type() {
  np_type_ = 7;
  clear_has_np_type();
}
inline ::NicotbConfig::Signal_NpType Signal::np_type() const {
  return static_cast< ::NicotbConfig::Signal_NpType >(np_type_);
}
inline void Signal::set_np_type(::NicotbConfig::Signal_NpType value) {
  assert(::NicotbConfig::Signal_NpType_IsValid(value));
  set_has_np_type();
  np_type_ = value;
}

// -------------------------------------------------------------------

// SignalGroupDefine

// required string name = 1;
inline bool SignalGroupDefine::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalGroupDefine::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalGroupDefine::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalGroupDefine::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SignalGroupDefine::name() const {
  return *name_;
}
inline void SignalGroupDefine::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SignalGroupDefine::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SignalGroupDefine::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalGroupDefine::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SignalGroupDefine::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalGroupDefine::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .NicotbConfig.Signal sigs = 2;
inline int SignalGroupDefine::sigs_size() const {
  return sigs_.size();
}
inline void SignalGroupDefine::clear_sigs() {
  sigs_.Clear();
}
inline const ::NicotbConfig::Signal& SignalGroupDefine::sigs(int index) const {
  return sigs_.Get(index);
}
inline ::NicotbConfig::Signal* SignalGroupDefine::mutable_sigs(int index) {
  return sigs_.Mutable(index);
}
inline ::NicotbConfig::Signal* SignalGroupDefine::add_sigs() {
  return sigs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Signal >&
SignalGroupDefine::sigs() const {
  return sigs_;
}
inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Signal >*
SignalGroupDefine::mutable_sigs() {
  return &sigs_;
}

// -------------------------------------------------------------------

// SignalGroup

// optional string prefix = 1;
inline bool SignalGroup::has_prefix() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignalGroup::set_has_prefix() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignalGroup::clear_has_prefix() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignalGroup::clear_prefix() {
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    prefix_->clear();
  }
  clear_has_prefix();
}
inline const ::std::string& SignalGroup::prefix() const {
  return *prefix_;
}
inline void SignalGroup::set_prefix(const ::std::string& value) {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(value);
}
inline void SignalGroup::set_prefix(const char* value) {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(value);
}
inline void SignalGroup::set_prefix(const char* value, size_t size) {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  prefix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalGroup::mutable_prefix() {
  set_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    prefix_ = new ::std::string;
  }
  return prefix_;
}
inline ::std::string* SignalGroup::release_prefix() {
  clear_has_prefix();
  if (prefix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prefix_;
    prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalGroup::set_allocated_prefix(::std::string* prefix) {
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete prefix_;
  }
  if (prefix) {
    set_has_prefix();
    prefix_ = prefix;
  } else {
    clear_has_prefix();
    prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string grp_def_name = 2;
inline bool SignalGroup::has_grp_def_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignalGroup::set_has_grp_def_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignalGroup::clear_has_grp_def_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignalGroup::clear_grp_def_name() {
  if (grp_def_name_ != &::google::protobuf::internal::kEmptyString) {
    grp_def_name_->clear();
  }
  clear_has_grp_def_name();
}
inline const ::std::string& SignalGroup::grp_def_name() const {
  return *grp_def_name_;
}
inline void SignalGroup::set_grp_def_name(const ::std::string& value) {
  set_has_grp_def_name();
  if (grp_def_name_ == &::google::protobuf::internal::kEmptyString) {
    grp_def_name_ = new ::std::string;
  }
  grp_def_name_->assign(value);
}
inline void SignalGroup::set_grp_def_name(const char* value) {
  set_has_grp_def_name();
  if (grp_def_name_ == &::google::protobuf::internal::kEmptyString) {
    grp_def_name_ = new ::std::string;
  }
  grp_def_name_->assign(value);
}
inline void SignalGroup::set_grp_def_name(const char* value, size_t size) {
  set_has_grp_def_name();
  if (grp_def_name_ == &::google::protobuf::internal::kEmptyString) {
    grp_def_name_ = new ::std::string;
  }
  grp_def_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SignalGroup::mutable_grp_def_name() {
  set_has_grp_def_name();
  if (grp_def_name_ == &::google::protobuf::internal::kEmptyString) {
    grp_def_name_ = new ::std::string;
  }
  return grp_def_name_;
}
inline ::std::string* SignalGroup::release_grp_def_name() {
  clear_has_grp_def_name();
  if (grp_def_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = grp_def_name_;
    grp_def_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SignalGroup::set_allocated_grp_def_name(::std::string* grp_def_name) {
  if (grp_def_name_ != &::google::protobuf::internal::kEmptyString) {
    delete grp_def_name_;
  }
  if (grp_def_name) {
    set_has_grp_def_name();
    grp_def_name_ = grp_def_name;
  } else {
    clear_has_grp_def_name();
    grp_def_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Bus

// required string name = 1;
inline bool Bus::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Bus::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Bus::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Bus::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Bus::name() const {
  return *name_;
}
inline void Bus::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Bus::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Bus::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bus::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Bus::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bus::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string hier = 2;
inline bool Bus::has_hier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Bus::set_has_hier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Bus::clear_has_hier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Bus::clear_hier() {
  if (hier_ != &::google::protobuf::internal::kEmptyString) {
    hier_->clear();
  }
  clear_has_hier();
}
inline const ::std::string& Bus::hier() const {
  return *hier_;
}
inline void Bus::set_hier(const ::std::string& value) {
  set_has_hier();
  if (hier_ == &::google::protobuf::internal::kEmptyString) {
    hier_ = new ::std::string;
  }
  hier_->assign(value);
}
inline void Bus::set_hier(const char* value) {
  set_has_hier();
  if (hier_ == &::google::protobuf::internal::kEmptyString) {
    hier_ = new ::std::string;
  }
  hier_->assign(value);
}
inline void Bus::set_hier(const char* value, size_t size) {
  set_has_hier();
  if (hier_ == &::google::protobuf::internal::kEmptyString) {
    hier_ = new ::std::string;
  }
  hier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bus::mutable_hier() {
  set_has_hier();
  if (hier_ == &::google::protobuf::internal::kEmptyString) {
    hier_ = new ::std::string;
  }
  return hier_;
}
inline ::std::string* Bus::release_hier() {
  clear_has_hier();
  if (hier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hier_;
    hier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Bus::set_allocated_hier(::std::string* hier) {
  if (hier_ != &::google::protobuf::internal::kEmptyString) {
    delete hier_;
  }
  if (hier) {
    set_has_hier();
    hier_ = hier;
  } else {
    clear_has_hier();
    hier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .NicotbConfig.SignalGroup sig_grps = 3;
inline int Bus::sig_grps_size() const {
  return sig_grps_.size();
}
inline void Bus::clear_sig_grps() {
  sig_grps_.Clear();
}
inline const ::NicotbConfig::SignalGroup& Bus::sig_grps(int index) const {
  return sig_grps_.Get(index);
}
inline ::NicotbConfig::SignalGroup* Bus::mutable_sig_grps(int index) {
  return sig_grps_.Mutable(index);
}
inline ::NicotbConfig::SignalGroup* Bus::add_sig_grps() {
  return sig_grps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::SignalGroup >&
Bus::sig_grps() const {
  return sig_grps_;
}
inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::SignalGroup >*
Bus::mutable_sig_grps() {
  return &sig_grps_;
}

// repeated .NicotbConfig.Signal sigs = 4;
inline int Bus::sigs_size() const {
  return sigs_.size();
}
inline void Bus::clear_sigs() {
  sigs_.Clear();
}
inline const ::NicotbConfig::Signal& Bus::sigs(int index) const {
  return sigs_.Get(index);
}
inline ::NicotbConfig::Signal* Bus::mutable_sigs(int index) {
  return sigs_.Mutable(index);
}
inline ::NicotbConfig::Signal* Bus::add_sigs() {
  return sigs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Signal >&
Bus::sigs() const {
  return sigs_;
}
inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Signal >*
Bus::mutable_sigs() {
  return &sigs_;
}

// -------------------------------------------------------------------

// Event

// required string name = 1;
inline bool Event::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Event::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Event::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Event::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Event::name() const {
  return *name_;
}
inline void Event::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Event::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Event::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Event::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ev_hier = 2;
inline bool Event::has_ev_hier() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Event::set_has_ev_hier() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Event::clear_has_ev_hier() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Event::clear_ev_hier() {
  if (ev_hier_ != &::google::protobuf::internal::kEmptyString) {
    ev_hier_->clear();
  }
  clear_has_ev_hier();
}
inline const ::std::string& Event::ev_hier() const {
  return *ev_hier_;
}
inline void Event::set_ev_hier(const ::std::string& value) {
  set_has_ev_hier();
  if (ev_hier_ == &::google::protobuf::internal::kEmptyString) {
    ev_hier_ = new ::std::string;
  }
  ev_hier_->assign(value);
}
inline void Event::set_ev_hier(const char* value) {
  set_has_ev_hier();
  if (ev_hier_ == &::google::protobuf::internal::kEmptyString) {
    ev_hier_ = new ::std::string;
  }
  ev_hier_->assign(value);
}
inline void Event::set_ev_hier(const char* value, size_t size) {
  set_has_ev_hier();
  if (ev_hier_ == &::google::protobuf::internal::kEmptyString) {
    ev_hier_ = new ::std::string;
  }
  ev_hier_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_ev_hier() {
  set_has_ev_hier();
  if (ev_hier_ == &::google::protobuf::internal::kEmptyString) {
    ev_hier_ = new ::std::string;
  }
  return ev_hier_;
}
inline ::std::string* Event::release_ev_hier() {
  clear_has_ev_hier();
  if (ev_hier_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ev_hier_;
    ev_hier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event::set_allocated_ev_hier(::std::string* ev_hier) {
  if (ev_hier_ != &::google::protobuf::internal::kEmptyString) {
    delete ev_hier_;
  }
  if (ev_hier) {
    set_has_ev_hier();
    ev_hier_ = ev_hier;
  } else {
    clear_has_ev_hier();
    ev_hier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ev_name = 3;
inline bool Event::has_ev_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Event::set_has_ev_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Event::clear_has_ev_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Event::clear_ev_name() {
  if (ev_name_ != &::google::protobuf::internal::kEmptyString) {
    ev_name_->clear();
  }
  clear_has_ev_name();
}
inline const ::std::string& Event::ev_name() const {
  return *ev_name_;
}
inline void Event::set_ev_name(const ::std::string& value) {
  set_has_ev_name();
  if (ev_name_ == &::google::protobuf::internal::kEmptyString) {
    ev_name_ = new ::std::string;
  }
  ev_name_->assign(value);
}
inline void Event::set_ev_name(const char* value) {
  set_has_ev_name();
  if (ev_name_ == &::google::protobuf::internal::kEmptyString) {
    ev_name_ = new ::std::string;
  }
  ev_name_->assign(value);
}
inline void Event::set_ev_name(const char* value, size_t size) {
  set_has_ev_name();
  if (ev_name_ == &::google::protobuf::internal::kEmptyString) {
    ev_name_ = new ::std::string;
  }
  ev_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Event::mutable_ev_name() {
  set_has_ev_name();
  if (ev_name_ == &::google::protobuf::internal::kEmptyString) {
    ev_name_ = new ::std::string;
  }
  return ev_name_;
}
inline ::std::string* Event::release_ev_name() {
  clear_has_ev_name();
  if (ev_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ev_name_;
    ev_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Event::set_allocated_ev_name(::std::string* ev_name) {
  if (ev_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ev_name_;
  }
  if (ev_name) {
    set_has_ev_name();
    ev_name_ = ev_name;
  } else {
    clear_has_ev_name();
    ev_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NicotbConfig

// repeated .NicotbConfig.SignalGroupDefine siggrp_defs = 1;
inline int NicotbConfig::siggrp_defs_size() const {
  return siggrp_defs_.size();
}
inline void NicotbConfig::clear_siggrp_defs() {
  siggrp_defs_.Clear();
}
inline const ::NicotbConfig::SignalGroupDefine& NicotbConfig::siggrp_defs(int index) const {
  return siggrp_defs_.Get(index);
}
inline ::NicotbConfig::SignalGroupDefine* NicotbConfig::mutable_siggrp_defs(int index) {
  return siggrp_defs_.Mutable(index);
}
inline ::NicotbConfig::SignalGroupDefine* NicotbConfig::add_siggrp_defs() {
  return siggrp_defs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::SignalGroupDefine >&
NicotbConfig::siggrp_defs() const {
  return siggrp_defs_;
}
inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::SignalGroupDefine >*
NicotbConfig::mutable_siggrp_defs() {
  return &siggrp_defs_;
}

// repeated .NicotbConfig.Bus buses = 2;
inline int NicotbConfig::buses_size() const {
  return buses_.size();
}
inline void NicotbConfig::clear_buses() {
  buses_.Clear();
}
inline const ::NicotbConfig::Bus& NicotbConfig::buses(int index) const {
  return buses_.Get(index);
}
inline ::NicotbConfig::Bus* NicotbConfig::mutable_buses(int index) {
  return buses_.Mutable(index);
}
inline ::NicotbConfig::Bus* NicotbConfig::add_buses() {
  return buses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Bus >&
NicotbConfig::buses() const {
  return buses_;
}
inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Bus >*
NicotbConfig::mutable_buses() {
  return &buses_;
}

// repeated .NicotbConfig.Event events = 3;
inline int NicotbConfig::events_size() const {
  return events_.size();
}
inline void NicotbConfig::clear_events() {
  events_.Clear();
}
inline const ::NicotbConfig::Event& NicotbConfig::events(int index) const {
  return events_.Get(index);
}
inline ::NicotbConfig::Event* NicotbConfig::mutable_events(int index) {
  return events_.Mutable(index);
}
inline ::NicotbConfig::Event* NicotbConfig::add_events() {
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Event >&
NicotbConfig::events() const {
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::NicotbConfig::Event >*
NicotbConfig::mutable_events() {
  return &events_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NicotbConfig

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NicotbConfig::Signal_NpType>() {
  return ::NicotbConfig::Signal_NpType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_nicotb_5fconfig_2eproto__INCLUDED

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nicotb_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "nicotb_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NicotbConfig {

namespace {

const ::google::protobuf::Descriptor* Signal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Signal_NpType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* SignalGroupDefine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalGroupDefine_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignalGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignalGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Bus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Bus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* NicotbConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NicotbConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_nicotb_5fconfig_2eproto() {
  protobuf_AddDesc_nicotb_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "nicotb_config.proto");
  GOOGLE_CHECK(file != NULL);
  Signal_descriptor_ = file->message_type(0);
  static const int Signal_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, np_type_),
  };
  Signal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Signal_descriptor_,
      Signal::default_instance_,
      Signal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Signal));
  Signal_NpType_descriptor_ = Signal_descriptor_->enum_type(0);
  SignalGroupDefine_descriptor_ = file->message_type(1);
  static const int SignalGroupDefine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalGroupDefine, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalGroupDefine, sigs_),
  };
  SignalGroupDefine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalGroupDefine_descriptor_,
      SignalGroupDefine::default_instance_,
      SignalGroupDefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalGroupDefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalGroupDefine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalGroupDefine));
  SignalGroup_descriptor_ = file->message_type(2);
  static const int SignalGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalGroup, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalGroup, grp_def_name_),
  };
  SignalGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignalGroup_descriptor_,
      SignalGroup::default_instance_,
      SignalGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignalGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignalGroup));
  Bus_descriptor_ = file->message_type(3);
  static const int Bus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, hier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, sig_grps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, sigs_),
  };
  Bus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Bus_descriptor_,
      Bus::default_instance_,
      Bus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Bus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Bus));
  Event_descriptor_ = file->message_type(4);
  static const int Event_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, ev_hier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, ev_name_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  NicotbConfig_descriptor_ = file->message_type(5);
  static const int NicotbConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicotbConfig, siggrp_defs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicotbConfig, buses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicotbConfig, events_),
  };
  NicotbConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NicotbConfig_descriptor_,
      NicotbConfig::default_instance_,
      NicotbConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicotbConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NicotbConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NicotbConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_nicotb_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Signal_descriptor_, &Signal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalGroupDefine_descriptor_, &SignalGroupDefine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignalGroup_descriptor_, &SignalGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Bus_descriptor_, &Bus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NicotbConfig_descriptor_, &NicotbConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_nicotb_5fconfig_2eproto() {
  delete Signal::default_instance_;
  delete Signal_reflection_;
  delete SignalGroupDefine::default_instance_;
  delete SignalGroupDefine_reflection_;
  delete SignalGroup::default_instance_;
  delete SignalGroup_reflection_;
  delete Bus::default_instance_;
  delete Bus_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete NicotbConfig::default_instance_;
  delete NicotbConfig_reflection_;
}

void protobuf_AddDesc_nicotb_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023nicotb_config.proto\022\014NicotbConfig\"\236\001\n\006"
    "Signal\022\014\n\004name\030\001 \002(\t\022\r\n\005shape\030\002 \003(\005\0221\n\007n"
    "p_type\030\003 \001(\0162\033.NicotbConfig.Signal.NpTyp"
    "e:\003I32\"D\n\006NpType\022\006\n\002U1\020\001\022\006\n\002U8\020\002\022\007\n\003U16\020"
    "\003\022\007\n\003U32\020\004\022\006\n\002I8\020\005\022\007\n\003I16\020\006\022\007\n\003I32\020\007\"E\n\021"
    "SignalGroupDefine\022\014\n\004name\030\001 \002(\t\022\"\n\004sigs\030"
    "\002 \003(\0132\024.NicotbConfig.Signal\"3\n\013SignalGro"
    "up\022\016\n\006prefix\030\001 \001(\t\022\024\n\014grp_def_name\030\002 \002(\t"
    "\"r\n\003Bus\022\014\n\004name\030\001 \002(\t\022\014\n\004hier\030\002 \001(\t\022+\n\010s"
    "ig_grps\030\003 \003(\0132\031.NicotbConfig.SignalGroup"
    "\022\"\n\004sigs\030\004 \003(\0132\024.NicotbConfig.Signal\"7\n\005"
    "Event\022\014\n\004name\030\001 \002(\t\022\017\n\007ev_hier\030\002 \001(\t\022\017\n\007"
    "ev_name\030\003 \002(\t\"\213\001\n\014NicotbConfig\0224\n\013siggrp"
    "_defs\030\001 \003(\0132\037.NicotbConfig.SignalGroupDe"
    "fine\022 \n\005buses\030\002 \003(\0132\021.NicotbConfig.Bus\022#"
    "\n\006events\030\003 \003(\0132\023.NicotbConfig.Event", 635);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "nicotb_config.proto", &protobuf_RegisterTypes);
  Signal::default_instance_ = new Signal();
  SignalGroupDefine::default_instance_ = new SignalGroupDefine();
  SignalGroup::default_instance_ = new SignalGroup();
  Bus::default_instance_ = new Bus();
  Event::default_instance_ = new Event();
  NicotbConfig::default_instance_ = new NicotbConfig();
  Signal::default_instance_->InitAsDefaultInstance();
  SignalGroupDefine::default_instance_->InitAsDefaultInstance();
  SignalGroup::default_instance_->InitAsDefaultInstance();
  Bus::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  NicotbConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_nicotb_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_nicotb_5fconfig_2eproto {
  StaticDescriptorInitializer_nicotb_5fconfig_2eproto() {
    protobuf_AddDesc_nicotb_5fconfig_2eproto();
  }
} static_descriptor_initializer_nicotb_5fconfig_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Signal_NpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_NpType_descriptor_;
}
bool Signal_NpType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Signal_NpType Signal::U1;
const Signal_NpType Signal::U8;
const Signal_NpType Signal::U16;
const Signal_NpType Signal::U32;
const Signal_NpType Signal::I8;
const Signal_NpType Signal::I16;
const Signal_NpType Signal::I32;
const Signal_NpType Signal::NpType_MIN;
const Signal_NpType Signal::NpType_MAX;
const int Signal::NpType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Signal::kNameFieldNumber;
const int Signal::kShapeFieldNumber;
const int Signal::kNpTypeFieldNumber;
#endif  // !_MSC_VER

Signal::Signal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Signal::InitAsDefaultInstance() {
}

Signal::Signal(const Signal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Signal::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  np_type_ = 7;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signal::~Signal() {
  SharedDtor();
}

void Signal::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_descriptor_;
}

const Signal& Signal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nicotb_5fconfig_2eproto();
  return *default_instance_;
}

Signal* Signal::default_instance_ = NULL;

Signal* Signal::New() const {
  return new Signal;
}

void Signal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    np_type_ = 7;
  }
  shape_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        break;
      }

      // repeated int32 shape = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_shape())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_shape;
        if (input->ExpectTag(24)) goto parse_np_type;
        break;
      }

      // optional .NicotbConfig.Signal.NpType np_type = 3 [default = I32];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_np_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NicotbConfig::Signal_NpType_IsValid(value)) {
            set_np_type(static_cast< ::NicotbConfig::Signal_NpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->shape(i), output);
  }

  // optional .NicotbConfig.Signal.NpType np_type = 3 [default = I32];
  if (has_np_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->np_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Signal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated int32 shape = 2;
  for (int i = 0; i < this->shape_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->shape(i), target);
  }

  // optional .NicotbConfig.Signal.NpType np_type = 3 [default = I32];
  if (has_np_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->np_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Signal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .NicotbConfig.Signal.NpType np_type = 3 [default = I32];
    if (has_np_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->np_type());
    }

  }
  // repeated int32 shape = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->shape_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shape(i));
    }
    total_size += 1 * this->shape_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Signal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Signal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
  GOOGLE_CHECK_NE(&from, this);
  shape_.MergeFrom(from.shape_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_np_type()) {
      set_np_type(from.np_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Signal::Swap(Signal* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    shape_.Swap(&other->shape_);
    std::swap(np_type_, other->np_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signal_descriptor_;
  metadata.reflection = Signal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignalGroupDefine::kNameFieldNumber;
const int SignalGroupDefine::kSigsFieldNumber;
#endif  // !_MSC_VER

SignalGroupDefine::SignalGroupDefine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalGroupDefine::InitAsDefaultInstance() {
}

SignalGroupDefine::SignalGroupDefine(const SignalGroupDefine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalGroupDefine::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalGroupDefine::~SignalGroupDefine() {
  SharedDtor();
}

void SignalGroupDefine::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SignalGroupDefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalGroupDefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalGroupDefine_descriptor_;
}

const SignalGroupDefine& SignalGroupDefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nicotb_5fconfig_2eproto();
  return *default_instance_;
}

SignalGroupDefine* SignalGroupDefine::default_instance_ = NULL;

SignalGroupDefine* SignalGroupDefine::New() const {
  return new SignalGroupDefine;
}

void SignalGroupDefine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  sigs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalGroupDefine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sigs;
        break;
      }

      // repeated .NicotbConfig.Signal sigs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sigs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sigs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalGroupDefine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .NicotbConfig.Signal sigs = 2;
  for (int i = 0; i < this->sigs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sigs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalGroupDefine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .NicotbConfig.Signal sigs = 2;
  for (int i = 0; i < this->sigs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sigs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalGroupDefine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .NicotbConfig.Signal sigs = 2;
  total_size += 1 * this->sigs_size();
  for (int i = 0; i < this->sigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sigs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalGroupDefine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalGroupDefine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalGroupDefine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalGroupDefine::MergeFrom(const SignalGroupDefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  sigs_.MergeFrom(from.sigs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalGroupDefine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalGroupDefine::CopyFrom(const SignalGroupDefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalGroupDefine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < sigs_size(); i++) {
    if (!this->sigs(i).IsInitialized()) return false;
  }
  return true;
}

void SignalGroupDefine::Swap(SignalGroupDefine* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    sigs_.Swap(&other->sigs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalGroupDefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalGroupDefine_descriptor_;
  metadata.reflection = SignalGroupDefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignalGroup::kPrefixFieldNumber;
const int SignalGroup::kGrpDefNameFieldNumber;
#endif  // !_MSC_VER

SignalGroup::SignalGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignalGroup::InitAsDefaultInstance() {
}

SignalGroup::SignalGroup(const SignalGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignalGroup::SharedCtor() {
  _cached_size_ = 0;
  prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grp_def_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignalGroup::~SignalGroup() {
  SharedDtor();
}

void SignalGroup::SharedDtor() {
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete prefix_;
  }
  if (grp_def_name_ != &::google::protobuf::internal::kEmptyString) {
    delete grp_def_name_;
  }
  if (this != default_instance_) {
  }
}

void SignalGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignalGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignalGroup_descriptor_;
}

const SignalGroup& SignalGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nicotb_5fconfig_2eproto();
  return *default_instance_;
}

SignalGroup* SignalGroup::default_instance_ = NULL;

SignalGroup* SignalGroup::New() const {
  return new SignalGroup;
}

void SignalGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_prefix()) {
      if (prefix_ != &::google::protobuf::internal::kEmptyString) {
        prefix_->clear();
      }
    }
    if (has_grp_def_name()) {
      if (grp_def_name_ != &::google::protobuf::internal::kEmptyString) {
        grp_def_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignalGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string prefix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_grp_def_name;
        break;
      }

      // required string grp_def_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grp_def_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grp_def_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->grp_def_name().data(), this->grp_def_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignalGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->prefix(), output);
  }

  // required string grp_def_name = 2;
  if (has_grp_def_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grp_def_name().data(), this->grp_def_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->grp_def_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignalGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string prefix = 1;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->prefix(), target);
  }

  // required string grp_def_name = 2;
  if (has_grp_def_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->grp_def_name().data(), this->grp_def_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->grp_def_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignalGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string prefix = 1;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }

    // required string grp_def_name = 2;
    if (has_grp_def_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->grp_def_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignalGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignalGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignalGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignalGroup::MergeFrom(const SignalGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
    if (from.has_grp_def_name()) {
      set_grp_def_name(from.grp_def_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignalGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalGroup::CopyFrom(const SignalGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void SignalGroup::Swap(SignalGroup* other) {
  if (other != this) {
    std::swap(prefix_, other->prefix_);
    std::swap(grp_def_name_, other->grp_def_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignalGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignalGroup_descriptor_;
  metadata.reflection = SignalGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Bus::kNameFieldNumber;
const int Bus::kHierFieldNumber;
const int Bus::kSigGrpsFieldNumber;
const int Bus::kSigsFieldNumber;
#endif  // !_MSC_VER

Bus::Bus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Bus::InitAsDefaultInstance() {
}

Bus::Bus(const Bus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Bus::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bus::~Bus() {
  SharedDtor();
}

void Bus::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (hier_ != &::google::protobuf::internal::kEmptyString) {
    delete hier_;
  }
  if (this != default_instance_) {
  }
}

void Bus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Bus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Bus_descriptor_;
}

const Bus& Bus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nicotb_5fconfig_2eproto();
  return *default_instance_;
}

Bus* Bus::default_instance_ = NULL;

Bus* Bus::New() const {
  return new Bus;
}

void Bus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_hier()) {
      if (hier_ != &::google::protobuf::internal::kEmptyString) {
        hier_->clear();
      }
    }
  }
  sig_grps_.Clear();
  sigs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Bus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hier;
        break;
      }

      // optional string hier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hier().data(), this->hier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sig_grps;
        break;
      }

      // repeated .NicotbConfig.SignalGroup sig_grps = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig_grps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sig_grps()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sig_grps;
        if (input->ExpectTag(34)) goto parse_sigs;
        break;
      }

      // repeated .NicotbConfig.Signal sigs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sigs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sigs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sigs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string hier = 2;
  if (has_hier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hier().data(), this->hier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hier(), output);
  }

  // repeated .NicotbConfig.SignalGroup sig_grps = 3;
  for (int i = 0; i < this->sig_grps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sig_grps(i), output);
  }

  // repeated .NicotbConfig.Signal sigs = 4;
  for (int i = 0; i < this->sigs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sigs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Bus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string hier = 2;
  if (has_hier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hier().data(), this->hier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hier(), target);
  }

  // repeated .NicotbConfig.SignalGroup sig_grps = 3;
  for (int i = 0; i < this->sig_grps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sig_grps(i), target);
  }

  // repeated .NicotbConfig.Signal sigs = 4;
  for (int i = 0; i < this->sigs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sigs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Bus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string hier = 2;
    if (has_hier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hier());
    }

  }
  // repeated .NicotbConfig.SignalGroup sig_grps = 3;
  total_size += 1 * this->sig_grps_size();
  for (int i = 0; i < this->sig_grps_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sig_grps(i));
  }

  // repeated .NicotbConfig.Signal sigs = 4;
  total_size += 1 * this->sigs_size();
  for (int i = 0; i < this->sigs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sigs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Bus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Bus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Bus::MergeFrom(const Bus& from) {
  GOOGLE_CHECK_NE(&from, this);
  sig_grps_.MergeFrom(from.sig_grps_);
  sigs_.MergeFrom(from.sigs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hier()) {
      set_hier(from.hier());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Bus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bus::CopyFrom(const Bus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < sig_grps_size(); i++) {
    if (!this->sig_grps(i).IsInitialized()) return false;
  }
  for (int i = 0; i < sigs_size(); i++) {
    if (!this->sigs(i).IsInitialized()) return false;
  }
  return true;
}

void Bus::Swap(Bus* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(hier_, other->hier_);
    sig_grps_.Swap(&other->sig_grps_);
    sigs_.Swap(&other->sigs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Bus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Bus_descriptor_;
  metadata.reflection = Bus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kNameFieldNumber;
const int Event::kEvHierFieldNumber;
const int Event::kEvNameFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ev_hier_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ev_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ev_hier_ != &::google::protobuf::internal::kEmptyString) {
    delete ev_hier_;
  }
  if (ev_name_ != &::google::protobuf::internal::kEmptyString) {
    delete ev_name_;
  }
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nicotb_5fconfig_2eproto();
  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ev_hier()) {
      if (ev_hier_ != &::google::protobuf::internal::kEmptyString) {
        ev_hier_->clear();
      }
    }
    if (has_ev_name()) {
      if (ev_name_ != &::google::protobuf::internal::kEmptyString) {
        ev_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ev_hier;
        break;
      }

      // optional string ev_hier = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ev_hier:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ev_hier()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ev_hier().data(), this->ev_hier().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ev_name;
        break;
      }

      // required string ev_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ev_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ev_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ev_name().data(), this->ev_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string ev_hier = 2;
  if (has_ev_hier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ev_hier().data(), this->ev_hier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ev_hier(), output);
  }

  // required string ev_name = 3;
  if (has_ev_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ev_name().data(), this->ev_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ev_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string ev_hier = 2;
  if (has_ev_hier()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ev_hier().data(), this->ev_hier().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ev_hier(), target);
  }

  // required string ev_name = 3;
  if (has_ev_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ev_name().data(), this->ev_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ev_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ev_hier = 2;
    if (has_ev_hier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ev_hier());
    }

    // required string ev_name = 3;
    if (has_ev_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ev_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ev_hier()) {
      set_ev_hier(from.ev_hier());
    }
    if (from.has_ev_name()) {
      set_ev_name(from.ev_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ev_hier_, other->ev_hier_);
    std::swap(ev_name_, other->ev_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NicotbConfig::kSiggrpDefsFieldNumber;
const int NicotbConfig::kBusesFieldNumber;
const int NicotbConfig::kEventsFieldNumber;
#endif  // !_MSC_VER

NicotbConfig::NicotbConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NicotbConfig::InitAsDefaultInstance() {
}

NicotbConfig::NicotbConfig(const NicotbConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NicotbConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NicotbConfig::~NicotbConfig() {
  SharedDtor();
}

void NicotbConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NicotbConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NicotbConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NicotbConfig_descriptor_;
}

const NicotbConfig& NicotbConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_nicotb_5fconfig_2eproto();
  return *default_instance_;
}

NicotbConfig* NicotbConfig::default_instance_ = NULL;

NicotbConfig* NicotbConfig::New() const {
  return new NicotbConfig;
}

void NicotbConfig::Clear() {
  siggrp_defs_.Clear();
  buses_.Clear();
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NicotbConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NicotbConfig.SignalGroupDefine siggrp_defs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_siggrp_defs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_siggrp_defs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_siggrp_defs;
        if (input->ExpectTag(18)) goto parse_buses;
        break;
      }

      // repeated .NicotbConfig.Bus buses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buses;
        if (input->ExpectTag(26)) goto parse_events;
        break;
      }

      // repeated .NicotbConfig.Event events = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NicotbConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NicotbConfig.SignalGroupDefine siggrp_defs = 1;
  for (int i = 0; i < this->siggrp_defs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->siggrp_defs(i), output);
  }

  // repeated .NicotbConfig.Bus buses = 2;
  for (int i = 0; i < this->buses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buses(i), output);
  }

  // repeated .NicotbConfig.Event events = 3;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->events(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NicotbConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NicotbConfig.SignalGroupDefine siggrp_defs = 1;
  for (int i = 0; i < this->siggrp_defs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->siggrp_defs(i), target);
  }

  // repeated .NicotbConfig.Bus buses = 2;
  for (int i = 0; i < this->buses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buses(i), target);
  }

  // repeated .NicotbConfig.Event events = 3;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->events(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NicotbConfig::ByteSize() const {
  int total_size = 0;

  // repeated .NicotbConfig.SignalGroupDefine siggrp_defs = 1;
  total_size += 1 * this->siggrp_defs_size();
  for (int i = 0; i < this->siggrp_defs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->siggrp_defs(i));
  }

  // repeated .NicotbConfig.Bus buses = 2;
  total_size += 1 * this->buses_size();
  for (int i = 0; i < this->buses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buses(i));
  }

  // repeated .NicotbConfig.Event events = 3;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NicotbConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NicotbConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NicotbConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NicotbConfig::MergeFrom(const NicotbConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  siggrp_defs_.MergeFrom(from.siggrp_defs_);
  buses_.MergeFrom(from.buses_);
  events_.MergeFrom(from.events_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NicotbConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NicotbConfig::CopyFrom(const NicotbConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NicotbConfig::IsInitialized() const {

  for (int i = 0; i < siggrp_defs_size(); i++) {
    if (!this->siggrp_defs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buses_size(); i++) {
    if (!this->buses(i).IsInitialized()) return false;
  }
  for (int i = 0; i < events_size(); i++) {
    if (!this->events(i).IsInitialized()) return false;
  }
  return true;
}

void NicotbConfig::Swap(NicotbConfig* other) {
  if (other != this) {
    siggrp_defs_.Swap(&other->siggrp_defs_);
    buses_.Swap(&other->buses_);
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NicotbConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NicotbConfig_descriptor_;
  metadata.reflection = NicotbConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NicotbConfig

// @@protoc_insertion_point(global_scope)
